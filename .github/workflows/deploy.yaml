name: Deploy to ECR and EKS

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.1.0'

      - name: Debug Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      - name: Set AWS CLI Configuration
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1

      - name: Show AWS Configuration
        run: aws configure list

      - name: Terraform Init
        run: terraform init
        # working-directory: ./modules

      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve
        # working-directory: ./modules
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          # Add other necessary environment variables

      - name: Get ECR Repository URL
        id: ecr-repo-url
        run: echo "ECR_REPO_URL=$(terraform output -raw repository_url)" >> GITHUB_ENV.tmp
        working-directory: ./modules


      - name: Load ECR Repository URL
        run: echo "ECR_REPO_URL=$(cat ./modules/GITHUB_ENV.tmp)" >> GITHUB_ENV && rm ./modules/GITHUB_ENV.tmp




      - name: Get Kubeconfig
        run: |
          CLUSTER_NAME="my-eks-cluster"
          aws eks --region us-east-1 update-kubeconfig --name $CLUSTER_NAME
          echo "::set-env name=KUBE_CONFIG_PATH::${HOME}/.kube/config" >> $GITHUB_ENV
    

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Build Docker Image
      run: docker build -t ${{ secrets.AWS_REGION }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-ecr-repo-jocasmen -f app/Dockerfile app

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: us-east-1
        registry: ${{ secrets.AWS_REGION }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        username: AWS
        password: ${{ secrets.AWS_ACCESS_TOKEN }}

    - name: Push Docker Image to ECR
      run: docker push ${{ secrets.AWS_REGION }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-ecr-repo-jocasmen:latest

    - name: Deploy to EKS
      run: kubectl apply -f kubernetes/deployment.yaml
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
        
  manual-destroy:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.1.0'

      - name: Debug Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      - name: Set AWS CLI Configuration
        run: |
         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws configure set region us-east-1

      - name: Terraform Init
        run: terraform init
        # working-directory: ./modules

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        # working-directory: ./modules
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          # Add other necessary environment variables
