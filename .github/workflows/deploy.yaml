name: Deploy to Docker Hub and EKS

on:
  push:
    branches:
    - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.1.0'

    - name: Debug Environment Variables
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

    - name: Set AWS CLI Configuration
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1

    - name: Show AWS Configuration
      run: aws configure list

    - name: Terraform Init
      run: terraform init
      # working-directory: ./modules

    - name: Terraform Apply
      id: terraform-apply
      run: terraform apply -auto-approve
      # working-directory: ./modules
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        # Add other necessary environment variables

    - name: Get ECR Repository URL
      id: ecr-repo-url
      run: echo "ECR_REPO_URL=$(terraform output -raw repository_url)" >> GITHUB_ENV.tmp
      working-directory: ./modules

    - name: Load ECR Repository URL
      run: echo "ECR_REPO_URL=$(cat ./modules/GITHUB_ENV.tmp)" >> GITHUB_ENV && rm ./modules/GITHUB_ENV.tmp

    - name: Get Kubeconfig
      run: |
        CLUSTER_NAME="my-eks-cluster"
        aws eks --region us-east-1 update-kubeconfig --name $CLUSTER_NAME
        echo "::set-env name=KUBE_CONFIG_PATH::${HOME}/.kube/config" >> $GITHUB_ENV

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Upgrade AWS CLI to version 2
      run: |
        sudo rm -rf /usr/local/aws-cli
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        aws --version  # Verify upgrade

    - name: Login to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Build Docker Image for Docker Hub
      run: docker build -t jocasmen94/n1co-test:latest -f app/Dockerfile app

    - name: Push Docker Image to Docker Hub
      run: docker push jocasmen94/n1co-test:latest

    - name: Deploy to EKS
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1
        aws eks update-kubeconfig --name my-eks-cluster
        kubectl apply -f kubernetes/deployment.yaml --validate=false
        kubectl get pods
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
    
  manual-destroy:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.1.0'

    - name: Debug Environment Variables
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

    - name: Set AWS CLI Configuration
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1

    - name: Terraform Init
      run: terraform init
      working-directory: ./modules

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./modules
      env:
        TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        # Add other necessary environment variables
